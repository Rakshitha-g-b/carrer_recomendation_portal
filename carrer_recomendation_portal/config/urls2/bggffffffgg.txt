<?php
// Display errors for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Database connection
$host = "localhost";
$user = "root";
$password = ""; // Use "" for XAMPP (Windows), "root" for MAMP (macOS)
$database = "inventory_db";

// Create connection
$conn = new mysqli($host, $user, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>




<?php
include 'db.php';

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add'])) {
    $name = $_POST['name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity'];

    // Use prepared statements to avoid SQL injection
    $stmt = $conn->prepare("INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)");
    $stmt->bind_param("sdi", $name, $price, $quantity);
    $stmt->execute();
    $stmt->close();
}

// Fetch existing records
$result = $conn->query("SELECT * FROM products");
?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Inventory</title>
</head>
<body>
    <h1>Product Inventory</h1>
    <form method="POST">
        <input name="name" placeholder="Product Name" required>
        <input name="price" type="number" step="0.01" placeholder="Price" required>
        <input name="quantity" type="number" placeholder="Quantity" required>
        <button type="submit" name="add">Add Product</button>
    </form>

    <h2>Product List</h2>
    <table border="1" cellpadding="5" cellspacing="0">
        <tr>
            <th>ID</th><th>Name</th><th>Price</th><th>Quantity</th>
        </tr>
        <?php while ($row = $result->fetch_assoc()): ?>
        <tr>
            <td><?= htmlspecialchars($row['id']) ?></td>
            <td><?= htmlspecialchars($row['name']) ?></td>
            <td><?= htmlspecialchars($row['price']) ?></td>
            <td><?= htmlspecialchars($row['quantity']) ?></td>
        </tr>
        <?php endwhile; ?>
    </table>
</body>

DROP TABLE IF EXISTS products;

CREATE TABLE products (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    quantity INT NOT NULL
);


8888
<?php
// db.php
$host = 'localhost';
$user = 'root';
$pass = 'root';
$db = 'concurrency_lab';

// Create a new MySQLi connection
$conn = new mysqli($host, $user, $pass, $db);

// Check for connection errors
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>





<!DOCTYPE html>
<html>
<head>
    <title>Concurrency Lab</title>
</head>
<body>
    <h2>Concurrency Control Simulation</h2>
    <ul>
        <li><a href="lock_simulation.php" target="_blank">Locking Simulation</a></li>
        <li><a href="timestamp_simulation.php" target="_blank">Timestamp Ordering Simulation</a></li>
    </ul>
</body>
</html>


<?php
// lock_simulation.php
include 'db.php';

// Simulate user input
$user_id = 1; // Simulating one user working on account id 1
$amount = 200; // Amount to subtract

// Start transaction
$conn->begin_transaction();

try {
    // Acquire row-level lock using SELECT FOR UPDATE
    $sql = "SELECT balance FROM bank_account WHERE id = ? FOR UPDATE";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $user_id);
    $stmt->execute();
    $stmt->bind_result($balance);
    $stmt->fetch();
    $stmt->close();

    echo "Original Balance: $balance<br>";

    // Simulate some delay to mimic concurrency
    sleep(5); // Wait for 5 seconds

    if ($balance >= $amount) {
        $new_balance = $balance - $amount;

        // Update the balance
        $update_sql = "UPDATE bank_account SET balance = ? WHERE id = ?";
        $update_stmt = $conn->prepare($update_sql);
        $update_stmt->bind_param("ii", $new_balance, $user_id);
        $update_stmt->execute();
        $update_stmt->close();

        echo "Transaction successful. New Balance: $new_balance";
    } else {
        echo "Insufficient balance.";
    }

    // Commit the transaction
    $conn->commit();

} catch (Exception $e) {
    // Rollback in case of any error
    $conn->rollback();
    echo "Transaction failed: " . $e->getMessage();
}
?>





<?php
// timestamp_simulation.php
include 'db.php';

// Simulated user and update amount
$user_id = 1;
$amount = 150;

// Fetch current balance and timestamp
$sql = "SELECT balance, last_updated FROM bank_account WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $user_id);
$stmt->execute();
$stmt->bind_result($balance, $last_updated);
$stmt->fetch();
$stmt->close();

echo "Original Balance: $balance<br>";
echo "Fetched Timestamp: $last_updated<br>";

// Simulate delay
sleep(5);

// Calculate new balance
$new_balance = $balance - $amount;

// Attempt update only if timestamp hasn't changed
$update_sql = "UPDATE bank_account 
               SET balance = ?, last_updated = CURRENT_TIMESTAMP 
               WHERE id = ? AND last_updated = ?";
$update_stmt = $conn->prepare($update_sql);
$update_stmt->bind_param("iis", $new_balance, $user_id, $last_updated);
$update_stmt->execute();

if ($update_stmt->affected_rows > 0) {
    echo "Transaction successful. New Balance: $new_balance";
} else {
    echo "Transaction failed due to concurrent update (timestamp mismatch).";
}

$update_stmt->close();
?>

CREATE TABLE IF NOT EXISTS bank_account (
    id INT PRIMARY KEY AUTO_INCREMENT,
    balance INT NOT NULL DEFAULT 1000,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE
CURRENT_TIMESTAMP
);

</html>
